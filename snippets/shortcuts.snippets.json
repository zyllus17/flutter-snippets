{
  "Creates a screen with text in center": {
    "prefix": "screen",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "class ${1:Screen} extends StatelessWidget {",
      "  const ${1:Screen}({Key? key}) : super(key: key);",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Scaffold(",
      "      appBar: AppBar(",
      "        title: Text('${1:App Bar}'),",
      "      ),",
      "      body: Center(",
      "        child: Text('${1:Hello World}'),",
      "      ),",
      "    );",
      "  }",
      "}",
      ""
    ],
    "description": "Creates a screen with text in center"
  },
  "Device Preview": {
    "prefix": "devprev",
    "body": [
      "import 'package:device_preview/device_preview.dart';",
      "import 'package:flutter/foundation.dart';",
      "import 'package:flutter/material.dart';",
      "",
      "void main() => runApp(",
      "      DevicePreview(",
      "        enabled: !kReleaseMode,",
      "        builder: (context) => const MyApp(), // Wrap your app",
      "      ),",
      "    );",
      "",
      "class MyApp extends StatelessWidget {",
      "  const MyApp({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "        debugShowCheckedModeBanner: false,",
      "        builder: DevicePreview.appBuilder,",
      "        useInheritedMediaQuery: true,",
      "        locale: DevicePreview.locale(context),",
      "        builder: DevicePreview.appBuilder,",
      "        title: 'Flutter Demo',",
      "        theme: ThemeData(",
      "          primarySwatch: Colors.blue,",
      "        ),",
      "        home: ${1:HomePage()},",
      "    );",
      "  }",
      "}"
    ],
    "description": "Device Preview"
  },
  "Material App": {
    "prefix": "mateapp",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "void main() {",
      "  runApp(const MyApp());",
      "}",
      "",
      "class MyApp extends StatelessWidget {",
      "  const MyApp({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "      title: 'Flutter Demo',",
      "      theme: ThemeData(",
      "        primarySwatch: Colors.blue,",
      "      ),",
      "      home: ${1:MyHomePage()},",
      "    );",
      "  }",
      "}"
    ],
    "description": "Creates a MaterialApp"
  },
  "Cupertino App": {
    "prefix": "cupeapp",
    "description": "Create a CupertinoApp",
    "body": [
      "import 'package:flutter/cupertino.dart';",
      " ",
      "void main() => runApp(MyApp());",
      " ",
      "class MyApp extends StatelessWidget {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return CupertinoApp(",
      "      title: 'Cupertino App',",
      "      home: CupertinoPageScaffold(",
      "        navigationBar: CupertinoNavigationBar(",
      "          middle: Text('Cupertino App Bar'),",
      "        ),",
      "        child: Center(",
      "          child: Container(",
      "            child: Text('Hello World'),",
      "          ),",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}"
    ]
  },
  "Build Method": {
    "prefix": "build",
    "body": [
      "@override",
      "Widget ${0:build}(BuildContext context) {",
      "  return ${1:};",
      "}"
    ],
    "description": "Describes the part of the user interface represented by this widget."
  },
  "Custom Painter ": {
    "prefix": "customPainter",
    "body": [
      "class ${0:name}Painter extends CustomPainter {",
      "",
      "  @override",
      "  void paint(Canvas canvas, Size size) {",
      "  }",
      "",
      "  @override",
      "  bool shouldRepaint(${0:name}Painter oldDelegate) => false;",
      "",
      "  @override",
      "  bool shouldRebuildSemantics(${0:name}Painter oldDelegate) => false;",
      "}"
    ],
    "description": "Used for creating custom paint"
  },
  "Custom Clipper ": {
    "prefix": "customClipper",
    "body": [
      "class ${0:name}Clipper extends CustomClipper<Path> {",
      "",
      "  @override",
      "  Path getClip(Size size) {",
      "  }",
      "",
      "  @override",
      "  bool shouldReclip(CustomClipper<Path> oldClipper) => false;",
      "}"
    ],
    "description": "Used for creating custom shapes"
  },
  "InitState ": {
    "prefix": "initS",
    "body": [
      "@override",
      "void initState() { ",
      "  super.initState();",
      "  ${1:}",
      "}"
    ],
    "description": "Called when this object is inserted into the tree. The framework will call this method exactly once for each State object it creates."
  },
  "Dispose": {
    "prefix": "dis",
    "body": [
      "@override",
      "void dispose() { ",
      "  super.dispose();",
      "  ${0:}",
      "}"
    ],
    "description": "Called when this object is removed from the tree permanently. The framework calls this method when this State object will never build again."
  },
  "CrossAxisAlignment": {
    "prefix": "caa",
    "body": [
      "crossAxisAlignment : CrossAxisAlignment.${0},"
    ],
    "description": "CrossAxisAlignment"
  },
  "MainAxisAlignment": {
    "prefix": "maa",
    "body": [
      "mainAxisAlignment : MainAxisAlignment.${1},"
    ],
    "description": "MainAxisAlignment"
  },
  "Custom AppBar widget": {
    "prefix": "appbar",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "class ${1:AppBarScreen} extends StatelessWidget with PreferredSizeWidget {",
      "@override",
      "  final Size preferredSize;",
      "",
      "  ${1:AppBarScreen}({Key? key}) : preferredSize = const Size.fromHeight(56.0), super(key: key);",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return AppBar(",
      "      title: const Text(",
      "        '${2:AppBarScreen}',",
      "      ),",
      "      leading: IconButton(",
      "        icon: const Icon(Icons.arrow_back_ios),",
      "        onPressed: () => Navigator.of(context).pop(),",
      "      ),",
      "      automaticallyImplyLeading: true,",
      "    );",
      "  }",
      "}"
    ],
    "description": "Custom AppBar widget"
  },
  "Default Counter App": {
    "prefix": "defaultApp",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "void main() {",
      "  runApp(const MyApp());",
      "}",
      "",
      "class MyApp extends StatelessWidget {",
      "  const MyApp({Key? key}) : super(key: key);",
      "",
      "  // This widget is the root of your application.",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "      title: 'Flutter Demo',",
      "      theme: ThemeData(",
      "        // This is the theme of your application.",
      "        //",
      "        // Try running your application with \"flutter run\". You'll see the",
      "        // application has a blue toolbar. Then, without quitting the app, try",
      "        // changing the primarySwatch below to Colors.green and then invoke",
      "        // \"hot reload\" (press \"r\" in the console where you ran \"flutter run\",",
      "        // or simply save your changes to \"hot reload\" in a Flutter IDE).",
      "        // Notice that the counter didn't reset back to zero; the application",
      "        // is not restarted.",
      "        primarySwatch: Colors.blue,",
      "      ),",
      "      home: const MyHomePage(title: 'Flutter Demo Home Page'),",
      "    );",
      "  }",
      "}",
      "",
      "class MyHomePage extends StatefulWidget {",
      "  const MyHomePage({Key? key, required this.title}) : super(key: key);",
      "",
      "  // This widget is the home page of your application. It is stateful, meaning",
      "  // that it has a State object (defined below) that contains fields that affect",
      "  // how it looks.",
      "",
      "  // This class is the configuration for the state. It holds the values (in this",
      "  // case the title) provided by the parent (in this case the App widget) and",
      "  // used by the build method of the State. Fields in a Widget subclass are",
      "  // always marked \"final\".",
      "",
      "  final String title;",
      "",
      "  @override",
      "  State<MyHomePage> createState() => _MyHomePageState();",
      "}",
      "",
      "class _MyHomePageState extends State<MyHomePage> {",
      "  int _counter = 0;",
      "",
      "  void _incrementCounter() {",
      "    setState(() {",
      "      // This call to setState tells the Flutter framework that something has",
      "      // changed in this State, which causes it to rerun the build method below",
      "      // so that the display can reflect the updated values. If we changed",
      "      // _counter without calling setState(), then the build method would not be",
      "      // called again, and so nothing would appear to happen.",
      "      _counter++;",
      "    });",
      "  }",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    // This method is rerun every time setState is called, for instance as done",
      "    // by the _incrementCounter method above.",
      "    //",
      "    // The Flutter framework has been optimized to make rerunning build methods",
      "    // fast, so that you can just rebuild anything that needs updating rather",
      "    // than having to individually change instances of widgets.",
      "    return Scaffold(",
      "      appBar: AppBar(",
      "        // Here we take the value from the MyHomePage object that was created by",
      "        // the App.build method, and use it to set our appbar title.",
      "        title: Text(widget.title),",
      "      ),",
      "      body: Center(",
      "        // Center is a layout widget. It takes a single child and positions it",
      "        // in the middle of the parent.",
      "        child: Column(",
      "          // Column is also a layout widget. It takes a list of children and",
      "          // arranges them vertically. By default, it sizes itself to fit its",
      "          // children horizontally, and tries to be as tall as its parent.",
      "          //",
      "          // Invoke \"debug painting\" (press \"p\" in the console, choose the",
      "          // \"Toggle Debug Paint\" action from the Flutter Inspector in Android",
      "          // Studio, or the \"Toggle Debug Paint\" command in Visual Studio Code)",
      "          // to see the wireframe for each widget.",
      "          //",
      "          // Column has various properties to control how it sizes itself and",
      "          // how it positions its children. Here we use mainAxisAlignment to",
      "          // center the children vertically; the main axis here is the vertical",
      "          // axis because Columns are vertical (the cross axis would be",
      "          // horizontal).",
      "          mainAxisAlignment: MainAxisAlignment.center,",
      "          children: <Widget>[",
      "            const Text(",
      "              'You have pushed the button this many times:',",
      "            ),",
      "            Text(",
      "              '$_counter',",
      "              style: Theme.of(context).textTheme.headline4,",
      "            ),",
      "          ],",
      "        ),",
      "      ),",
      "      floatingActionButton: FloatingActionButton(",
      "        onPressed: _incrementCounter,",
      "        tooltip: 'Increment',",
      "        child: const Icon(Icons.add),",
      "      ), // This trailing comma makes auto-formatting nicer for build methods.",
      "    );",
      "  }",
      "}"
    ],
    "description": "Default Counter App"
  },
  "Flutter TextStyle property": {
    "prefix": "fstyle",
    "body": [
      "style: const TextStyle(color: ${1:Color}, fontSize: ${2:}),"
    ],
    "description": "Flutter TextStyle property"
  },
  "Flutter String snippet": {
    "prefix": "fstring",
    "body": [
      "static const String ${1:StringName} = \"${2:String}\";"
    ],
    "description": "String snippet"
  },
  "Flutter Color snippet": {
    "prefix": "fcolor",
    "body": [
      "static const Color ${1:ColorName} = Color(0XFF${2:HexCode});",
      ""
    ],
    "description": "Flutter Color snippet"
  },
  "Equatable class snippet": {
    "prefix": "fequatable",
    "body": [
      "import 'package:equatable/equatable.dart';",
      "",
      "class ${1:ClassName} extends Equatable {",
      "  @override",
      "  List<Object?> get props => [${2}];",
      "}",
      ""
    ],
    "description": "Equatable class snippet"
  },
  "AppText class snippet": {
    "prefix": "fapptext",
    "body": [
      "class AppText {",
      "  AppText._();",
      "  static const String ${1:StringName} = \\\"${2:String}\\\";",
      "  ${3:}",
      "}"
    ],
    "description": "AppText class snippet"
  },
  "AppImages class snippet": {
    "prefix": "fappimage",
    "body": [
      "class AppImage {",
      "  AppImage._();",
      "  static const String ${1:ImageName} = \\\"assets/${2:ImageAddress}\\\";",
      "  ${3:}",
      "}"
    ],
    "description": "AppImages class snippet"
  },
  "AppColors class snippet": {
    "prefix": "fappcolors",
    "body": [
      "class AppColors {",
      "  AppColors._();",
      "  static const Color ${1:ColorName} = Color(0XFF${2:HexCode});",
      "  ${3:}",
      "}"
    ],
    "description": "AppColors class snippet"
  },
  "Stateful Widget": {
    "prefix": "stful",
    "body": [
      "class ${1:MyWidget} extends StatefulWidget {",
      "  const ${1:MyWidget}({super.key});",
      "",
      "  @override",
      "  State<${1:MyWidget}> createState() => _${1:MyWidget}State();",
      "}",
      "",
      "class _${1:MyWidget}State extends State<${1:MyWidget}> {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return ${2:Container()};",
      "  }",
      "}"
    ],
    "description": "Stateful Widget"
  },
  "Stateless Widget": {
    "prefix": "stless",
    "body": [
      "class ${1:MyWidget} extends StatelessWidget {",
      "  const ${1:MyWidget}({super.key});",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return ${2:Container()};",
      "  }",
      "}"
    ],
    "description": "Stateless Widget"
  },
  "Enum snippet": {
    "prefix": "enum",
    "body": [
      "enum ${1:EnumName} {{$2}}"
    ],
    "description": "Enum snippet"
  },
  "print": {
    "prefix": "print",
    "body": [
      "print(${1:object});"
    ],
    "description": "print"
  },
  "try catch statement": {
    "prefix": "trycatch",
    "body": [
      "try {",
      "  ${1:object} ",
      "} catch (${2:e}) {",
      "  ${3:print(e);} ",
      "}"
    ],
    "description": "try catch statement"
  },
  "Creates freezed state": {
  "prefix": "freezed",
  "body": [
    "import 'package:freezed_annotation/freezed_annotation.dart';",
    "part '${0:fileName}.state.freezed.dart';",
    "",
    "@freezed",
    "class ${1:ScreenName}State with _$${1:ScreenName}State {",
    "  const factory ${1:ScreenName}State({",
    "     ${2:StateName},",
    "  }) = _${1:ScreenName}State;",
    "}",
    ""
  ],
  "description": "Creates freezed class"
}
}